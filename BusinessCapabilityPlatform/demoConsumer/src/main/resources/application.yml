server:
  port: 8002
spring:
  profiles: default
  application:
    name: demoConsumer
  sleuth:
    web:
      client:
        enabled: true
    sampler:
      probability: 1.0
  zipkin:
    base-url: http://172.16.16.56:9411/
  boot:
    admin:
      client:
        url: http://172.16.16.58:8008
#-------------------------------------------------------
  redis:
    database: 10
    host: 172.16.16.171
    port: 6379
    #password: 
    lettuce:
      pool:
        max-active: 200
        max-idle: 20
        min-idle: 10
        max-wait: -1ms
    timeout: 2000ms
    cluster:
      nodes: 
        - 172.16.16.133:6379
        - 172.16.16.133:6380
        - 172.16.16.133:6381
        - 172.16.16.133:6382
        - 172.16.16.133:6383
        - 172.16.16.133:6384
#-----------------------------------------------------------------------------
  datasource:
    name: druidDataSource
    type: com.alibaba.druid.pool.DruidDataSource
    url: jdbc:mysql://172.16.16.90:3306/bkTi1?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&failOverReadOnly=false
    username: root
    password: 123
    driver-class-name: com.mysql.jdbc.Driver
    platform: mysql
    initialSize: 1
    minIdle: 3
    maxActive: 20
    maxWait: 60000
    timeBetweenEvictionRunsMillis: 60000
    minEvictableIdleTimeMillis: 30000
    validationQuery: select 'x'
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    poolPreparedStatements: true
    maxPoolPreparedStatementPerConnectionSize: 20
    filters: stat,wall,slf4j
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
  jpa:
    show-sql: true
    properties:
      hibernate:
        hbm2ddl:
          auto: none # create/create-drop/update/validate
#-----------------------------------------------------------------------------
# 设置熔断超时时间
#hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=10000
# 关闭Hystrix功能（不要和上面的配置一起使用）
#feign.hystrix.enabled=false
# 关闭熔断功能
#hystrix.command.default.execution.timeout.enabled=false

# 设置熔断超时时间
#hystrix.command.hello.execution.isolation.thread.timeoutInMilliseconds=10000
# 关闭熔断功能
#hystrix.command.hello.execution.timeout.enabled=false

#ribbon: 
#  ReadTimeout: 3000 
#  ConnectTimeout: 3000 
#  MaxAutoRetries: 1 #同一台实例最大重试次数,不包括首次调用 
#  MaxAutoRetriesNextServer: 1 #重试负载均衡其他的实例最大重试次数,不包括首次调用 
#  OkToRetryOnAllOperations: false #是否所有操作都重试 

#ribbon: 
#  ReadTimeout: 1000 
#  ConnectTimeout: 1000 
#  MaxAutoRetries: 1
#  MaxAutoRetriesNextServer: 1
#  OkToRetryOnAllOperations: false

#ribbon.ReadTimeout=5000
#ribbon.ConnectTimeout=500
#ribbon.MaxAutoRetries=1
#ribbon.MaxAutoRetriesNextServer=2
# 只配置了MaxAutoRetries没配置MaxAutoRetriesNextServer（MaxAutoRetriesNextServer默认值是1），那么超过ReadTimeout实际重新请求的次数不是3次，而是7次。通过多次调试得出以下结论，实际请求次数为：
#  MaxAutoRetries +  MaxAutoRetriesNextServer + (MaxAutoRetries * MaxAutoRetriesNextServer  )
#       如果想固定重新请求的次数，需要同时配置MaxAutoRetriesNextServer=0或者MaxAutoRetries=0

ribbon:
  ReadTimeout: 900
  ConnectTimeout: 500
  MaxAutoRetries: 0
  MaxAutoRetriesNextServer: 1

#spring-cloud-producer.ribbon.ReadTimeout=10000
#spring-cloud-producer.ribbon.ConnectTimeout=500
demoProducer:
  ribbon:
    ReadTimeout: 350
    ConnectTimeout: 500
    MaxAutoRetries: 0 # 1,sum=1+1=2; 3, sum=1+3=4;
    MaxAutoRetriesNextServer: 2

hystrix: 
  command: 
    default: 
      execution: 
        timeout: 
          enabled: true 
        isolation: 
          thread: 
            timeoutInMilliseconds: 8000 #配置断路器超时时间，默认是1000（1秒）

feign:
  hystrix:
    enabled: true
#  client:
#    config:
      #remote-service:           #服务名，填写default为所有服务
#      demoProducer:
#        connectTimeout: 1000
#        readTimeout: 200
#        loggerLevel: full
#        errorDecoder: com.example.SimpleErrorDecoder
#        retryer: com.example.SimpleRetryer

management:
  endpoints:
    web:
      exposure:
        include: "*" 
  endpoint:
    health:
      show-details: ALWAYS
#-----------------------------------------------------------------------------
swagger2: 
  title: 模块demoConsumer文档
  version: 1.0
  description: 模块demoConsumer文档描述
  basePackage: 
    - com.funo.footstone
#-----------------------------------------------------------------------------
tt: default017
configTestStr1: default019
info:
    profile: default007
